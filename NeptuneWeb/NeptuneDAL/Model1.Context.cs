//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NeptuneDAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class NeptuneEntities : DbContext
    {
        public NeptuneEntities()
            : base("name=NeptuneEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Device> Devices { get; set; }
        public virtual DbSet<Installer> Installers { get; set; }
        public virtual DbSet<WorkOrder> WorkOrders { get; set; }
    
        public virtual ObjectResult<GetSchedules_Result> GetSchedules(string deviceid, Nullable<int> installerid, Nullable<int> projectid)
        {
            var deviceidParameter = deviceid != null ?
                new ObjectParameter("deviceid", deviceid) :
                new ObjectParameter("deviceid", typeof(string));
    
            var installeridParameter = installerid.HasValue ?
                new ObjectParameter("installerid", installerid) :
                new ObjectParameter("installerid", typeof(int));
    
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchedules_Result>("GetSchedules", deviceidParameter, installeridParameter, projectidParameter);
        }
    
        public virtual ObjectResult<SaveWorkOrder_Result> SaveWorkOrder(string deviceid, Nullable<int> projectId, Nullable<int> scheduleID, Nullable<int> installerID, Nullable<System.DateTime> installDate, Nullable<int> newSerial, Nullable<int> correctSerial, Nullable<int> prevRead, Nullable<int> oldRead, Nullable<int> newRead, Nullable<int> altRead, Nullable<int> plumbingTime, Nullable<int> wiringTime, Nullable<int> newRemoteID, string oldSize, string newSize, byte[] oldPhoto, byte[] newPhoto, byte[] photo3, byte[] photo4, byte[] photo5, byte[] sig1, string notes, string skipReason, Nullable<bool> jobComplete, Nullable<bool> jobSkipped, Nullable<bool> compoundMeter, byte[] photo6, byte[] photo7, Nullable<double> oldPhotoLatitude, Nullable<double> oldPhotoLongitude, Nullable<double> newPhotoLatitude, Nullable<double> newPhotoLongitude, Nullable<double> photo3Latitude, Nullable<double> photo3Longitude, Nullable<double> photo4Latitude, Nullable<double> photo4Longitude, Nullable<double> photo5Latitude, Nullable<double> photo5Longitude, Nullable<double> photo6Latitude, Nullable<double> photo6Longitude, Nullable<double> photo7Latitude, Nullable<double> photo7Longitude, Nullable<double> jobSubmissionLatitude, Nullable<double> jobSubmissionLongitude)
        {
            var deviceidParameter = deviceid != null ?
                new ObjectParameter("deviceid", deviceid) :
                new ObjectParameter("deviceid", typeof(string));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            var installerIDParameter = installerID.HasValue ?
                new ObjectParameter("installerID", installerID) :
                new ObjectParameter("installerID", typeof(int));
    
            var installDateParameter = installDate.HasValue ?
                new ObjectParameter("InstallDate", installDate) :
                new ObjectParameter("InstallDate", typeof(System.DateTime));
    
            var newSerialParameter = newSerial.HasValue ?
                new ObjectParameter("NewSerial", newSerial) :
                new ObjectParameter("NewSerial", typeof(int));
    
            var correctSerialParameter = correctSerial.HasValue ?
                new ObjectParameter("CorrectSerial", correctSerial) :
                new ObjectParameter("CorrectSerial", typeof(int));
    
            var prevReadParameter = prevRead.HasValue ?
                new ObjectParameter("PrevRead", prevRead) :
                new ObjectParameter("PrevRead", typeof(int));
    
            var oldReadParameter = oldRead.HasValue ?
                new ObjectParameter("OldRead", oldRead) :
                new ObjectParameter("OldRead", typeof(int));
    
            var newReadParameter = newRead.HasValue ?
                new ObjectParameter("NewRead", newRead) :
                new ObjectParameter("NewRead", typeof(int));
    
            var altReadParameter = altRead.HasValue ?
                new ObjectParameter("AltRead", altRead) :
                new ObjectParameter("AltRead", typeof(int));
    
            var plumbingTimeParameter = plumbingTime.HasValue ?
                new ObjectParameter("PlumbingTime", plumbingTime) :
                new ObjectParameter("PlumbingTime", typeof(int));
    
            var wiringTimeParameter = wiringTime.HasValue ?
                new ObjectParameter("WiringTime", wiringTime) :
                new ObjectParameter("WiringTime", typeof(int));
    
            var newRemoteIDParameter = newRemoteID.HasValue ?
                new ObjectParameter("NewRemoteID", newRemoteID) :
                new ObjectParameter("NewRemoteID", typeof(int));
    
            var oldSizeParameter = oldSize != null ?
                new ObjectParameter("OldSize", oldSize) :
                new ObjectParameter("OldSize", typeof(string));
    
            var newSizeParameter = newSize != null ?
                new ObjectParameter("NewSize", newSize) :
                new ObjectParameter("NewSize", typeof(string));
    
            var oldPhotoParameter = oldPhoto != null ?
                new ObjectParameter("OldPhoto", oldPhoto) :
                new ObjectParameter("OldPhoto", typeof(byte[]));
    
            var newPhotoParameter = newPhoto != null ?
                new ObjectParameter("NewPhoto", newPhoto) :
                new ObjectParameter("NewPhoto", typeof(byte[]));
    
            var photo3Parameter = photo3 != null ?
                new ObjectParameter("Photo3", photo3) :
                new ObjectParameter("Photo3", typeof(byte[]));
    
            var photo4Parameter = photo4 != null ?
                new ObjectParameter("Photo4", photo4) :
                new ObjectParameter("Photo4", typeof(byte[]));
    
            var photo5Parameter = photo5 != null ?
                new ObjectParameter("Photo5", photo5) :
                new ObjectParameter("Photo5", typeof(byte[]));
    
            var sig1Parameter = sig1 != null ?
                new ObjectParameter("Sig1", sig1) :
                new ObjectParameter("Sig1", typeof(byte[]));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var skipReasonParameter = skipReason != null ?
                new ObjectParameter("SkipReason", skipReason) :
                new ObjectParameter("SkipReason", typeof(string));
    
            var jobCompleteParameter = jobComplete.HasValue ?
                new ObjectParameter("JobComplete", jobComplete) :
                new ObjectParameter("JobComplete", typeof(bool));
    
            var jobSkippedParameter = jobSkipped.HasValue ?
                new ObjectParameter("JobSkipped", jobSkipped) :
                new ObjectParameter("JobSkipped", typeof(bool));
    
            var compoundMeterParameter = compoundMeter.HasValue ?
                new ObjectParameter("CompoundMeter", compoundMeter) :
                new ObjectParameter("CompoundMeter", typeof(bool));
    
            var photo6Parameter = photo6 != null ?
                new ObjectParameter("Photo6", photo6) :
                new ObjectParameter("Photo6", typeof(byte[]));
    
            var photo7Parameter = photo7 != null ?
                new ObjectParameter("Photo7", photo7) :
                new ObjectParameter("Photo7", typeof(byte[]));
    
            var oldPhotoLatitudeParameter = oldPhotoLatitude.HasValue ?
                new ObjectParameter("OldPhotoLatitude", oldPhotoLatitude) :
                new ObjectParameter("OldPhotoLatitude", typeof(double));
    
            var oldPhotoLongitudeParameter = oldPhotoLongitude.HasValue ?
                new ObjectParameter("OldPhotoLongitude", oldPhotoLongitude) :
                new ObjectParameter("OldPhotoLongitude", typeof(double));
    
            var newPhotoLatitudeParameter = newPhotoLatitude.HasValue ?
                new ObjectParameter("NewPhotoLatitude", newPhotoLatitude) :
                new ObjectParameter("NewPhotoLatitude", typeof(double));
    
            var newPhotoLongitudeParameter = newPhotoLongitude.HasValue ?
                new ObjectParameter("NewPhotoLongitude", newPhotoLongitude) :
                new ObjectParameter("NewPhotoLongitude", typeof(double));
    
            var photo3LatitudeParameter = photo3Latitude.HasValue ?
                new ObjectParameter("Photo3Latitude", photo3Latitude) :
                new ObjectParameter("Photo3Latitude", typeof(double));
    
            var photo3LongitudeParameter = photo3Longitude.HasValue ?
                new ObjectParameter("Photo3Longitude", photo3Longitude) :
                new ObjectParameter("Photo3Longitude", typeof(double));
    
            var photo4LatitudeParameter = photo4Latitude.HasValue ?
                new ObjectParameter("Photo4Latitude", photo4Latitude) :
                new ObjectParameter("Photo4Latitude", typeof(double));
    
            var photo4LongitudeParameter = photo4Longitude.HasValue ?
                new ObjectParameter("Photo4Longitude", photo4Longitude) :
                new ObjectParameter("Photo4Longitude", typeof(double));
    
            var photo5LatitudeParameter = photo5Latitude.HasValue ?
                new ObjectParameter("Photo5Latitude", photo5Latitude) :
                new ObjectParameter("Photo5Latitude", typeof(double));
    
            var photo5LongitudeParameter = photo5Longitude.HasValue ?
                new ObjectParameter("Photo5Longitude", photo5Longitude) :
                new ObjectParameter("Photo5Longitude", typeof(double));
    
            var photo6LatitudeParameter = photo6Latitude.HasValue ?
                new ObjectParameter("Photo6Latitude", photo6Latitude) :
                new ObjectParameter("Photo6Latitude", typeof(double));
    
            var photo6LongitudeParameter = photo6Longitude.HasValue ?
                new ObjectParameter("Photo6Longitude", photo6Longitude) :
                new ObjectParameter("Photo6Longitude", typeof(double));
    
            var photo7LatitudeParameter = photo7Latitude.HasValue ?
                new ObjectParameter("Photo7Latitude", photo7Latitude) :
                new ObjectParameter("Photo7Latitude", typeof(double));
    
            var photo7LongitudeParameter = photo7Longitude.HasValue ?
                new ObjectParameter("Photo7Longitude", photo7Longitude) :
                new ObjectParameter("Photo7Longitude", typeof(double));
    
            var jobSubmissionLatitudeParameter = jobSubmissionLatitude.HasValue ?
                new ObjectParameter("JobSubmissionLatitude", jobSubmissionLatitude) :
                new ObjectParameter("JobSubmissionLatitude", typeof(double));
    
            var jobSubmissionLongitudeParameter = jobSubmissionLongitude.HasValue ?
                new ObjectParameter("JobSubmissionLongitude", jobSubmissionLongitude) :
                new ObjectParameter("JobSubmissionLongitude", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SaveWorkOrder_Result>("SaveWorkOrder", deviceidParameter, projectIdParameter, scheduleIDParameter, installerIDParameter, installDateParameter, newSerialParameter, correctSerialParameter, prevReadParameter, oldReadParameter, newReadParameter, altReadParameter, plumbingTimeParameter, wiringTimeParameter, newRemoteIDParameter, oldSizeParameter, newSizeParameter, oldPhotoParameter, newPhotoParameter, photo3Parameter, photo4Parameter, photo5Parameter, sig1Parameter, notesParameter, skipReasonParameter, jobCompleteParameter, jobSkippedParameter, compoundMeterParameter, photo6Parameter, photo7Parameter, oldPhotoLatitudeParameter, oldPhotoLongitudeParameter, newPhotoLatitudeParameter, newPhotoLongitudeParameter, photo3LatitudeParameter, photo3LongitudeParameter, photo4LatitudeParameter, photo4LongitudeParameter, photo5LatitudeParameter, photo5LongitudeParameter, photo6LatitudeParameter, photo6LongitudeParameter, photo7LatitudeParameter, photo7LongitudeParameter, jobSubmissionLatitudeParameter, jobSubmissionLongitudeParameter);
        }
    
        public virtual ObjectResult<GetProjects_Result> GetProjects(string deviceid, Nullable<int> installerid)
        {
            var deviceidParameter = deviceid != null ?
                new ObjectParameter("deviceid", deviceid) :
                new ObjectParameter("deviceid", typeof(string));
    
            var installeridParameter = installerid.HasValue ?
                new ObjectParameter("installerid", installerid) :
                new ObjectParameter("installerid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProjects_Result>("GetProjects", deviceidParameter, installeridParameter);
        }
    }
}
